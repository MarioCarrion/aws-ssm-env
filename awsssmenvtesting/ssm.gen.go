// Code generated by counterfeiter. DO NOT EDIT.
package awsssmenvtesting

import (
	"context"
	"sync"

	awsssmenv "github.com/MarioCarrion/aws-ssm-env"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/ssm"
)

type FakeSSM struct {
	GetParameterWithContextStub        func(context.Context, *ssm.GetParameterInput, ...request.Option) (*ssm.GetParameterOutput, error)
	getParameterWithContextMutex       sync.RWMutex
	getParameterWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ssm.GetParameterInput
		arg3 []request.Option
	}
	getParameterWithContextReturns struct {
		result1 *ssm.GetParameterOutput
		result2 error
	}
	getParameterWithContextReturnsOnCall map[int]struct {
		result1 *ssm.GetParameterOutput
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeSSM) GetParameterWithContext(arg1 context.Context, arg2 *ssm.GetParameterInput, arg3 ...request.Option) (*ssm.GetParameterOutput, error) {
	fake.getParameterWithContextMutex.Lock()
	ret, specificReturn := fake.getParameterWithContextReturnsOnCall[len(fake.getParameterWithContextArgsForCall)]
	fake.getParameterWithContextArgsForCall = append(fake.getParameterWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ssm.GetParameterInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("GetParameterWithContext", []interface{}{arg1, arg2, arg3})
	fake.getParameterWithContextMutex.Unlock()
	if fake.GetParameterWithContextStub != nil {
		return fake.GetParameterWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getParameterWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSM) GetParameterWithContextCallCount() int {
	fake.getParameterWithContextMutex.RLock()
	defer fake.getParameterWithContextMutex.RUnlock()
	return len(fake.getParameterWithContextArgsForCall)
}

func (fake *FakeSSM) GetParameterWithContextCalls(stub func(context.Context, *ssm.GetParameterInput, ...request.Option) (*ssm.GetParameterOutput, error)) {
	fake.getParameterWithContextMutex.Lock()
	defer fake.getParameterWithContextMutex.Unlock()
	fake.GetParameterWithContextStub = stub
}

func (fake *FakeSSM) GetParameterWithContextArgsForCall(i int) (context.Context, *ssm.GetParameterInput, []request.Option) {
	fake.getParameterWithContextMutex.RLock()
	defer fake.getParameterWithContextMutex.RUnlock()
	argsForCall := fake.getParameterWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeSSM) GetParameterWithContextReturns(result1 *ssm.GetParameterOutput, result2 error) {
	fake.getParameterWithContextMutex.Lock()
	defer fake.getParameterWithContextMutex.Unlock()
	fake.GetParameterWithContextStub = nil
	fake.getParameterWithContextReturns = struct {
		result1 *ssm.GetParameterOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSM) GetParameterWithContextReturnsOnCall(i int, result1 *ssm.GetParameterOutput, result2 error) {
	fake.getParameterWithContextMutex.Lock()
	defer fake.getParameterWithContextMutex.Unlock()
	fake.GetParameterWithContextStub = nil
	if fake.getParameterWithContextReturnsOnCall == nil {
		fake.getParameterWithContextReturnsOnCall = make(map[int]struct {
			result1 *ssm.GetParameterOutput
			result2 error
		})
	}
	fake.getParameterWithContextReturnsOnCall[i] = struct {
		result1 *ssm.GetParameterOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSM) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getParameterWithContextMutex.RLock()
	defer fake.getParameterWithContextMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeSSM) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ awsssmenv.SSM = new(FakeSSM)
